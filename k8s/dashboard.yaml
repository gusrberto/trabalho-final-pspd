apiVersion: v1
kind: Namespace
metadata:
  name: dashboard
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: metrics-dashboard
  namespace: dashboard
spec:
  replicas: 1
  selector:
    matchLabels:
      app: metrics-dashboard
  template:
    metadata:
      labels:
        app: metrics-dashboard
    spec:
      containers:
      - name: metrics-dashboard
        image: python:3.9-slim
        ports:
        - containerPort: 8080
        command: ["python", "-m", "http.server", "8080"]
        workingDir: /app
        volumeMounts:
        - name: dashboard-files
          mountPath: /app
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "200m"
            memory: "256Mi"
      # - name: metrics-api
      #   image: python:3.9-slim
      #   ports:
      #   - containerPort: 5001
      #   command: ["python", "/app/metrics_api_server.py"]
      #   workingDir: /app
      #   volumeMounts:
      #   - name: api-files
      #     mountPath: /app
      #   env:
      #   - name: FLASK_APP
      #     value: "metrics_api_server.py"
      #   resources:
      #   - requests:
      #     cpu: "100m"
      #     memory: "128Mi"
      #   - limits:
      #     cpu: "200m"
      #     memory: "256Mi"
      volumes:
      - name: dashboard-files
        configMap:
          name: dashboard-config
      - name: api-files
        configMap:
          name: api-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-config
  namespace: dashboard
data:
  metrics_api_server.py: |
    from flask import Flask, jsonify, request
    from flask_cors import CORS
    import requests
    import json
    from datetime import datetime, timedelta

    app = Flask(__name__)
    CORS(app)

    ELASTICSEARCH_URL = "http://elasticsearch.elasticsearch.svc.cluster.local:9200"
    INDEX_NAME = "game-of-life-metrics"

    @app.route('/api/metrics')
    def get_metrics():
        try:
            query = {
                "query": {
                    "range": {
                        "timestamp": {
                            "gte": "now-24h"
                        }
                    }
                },
                "aggs": {
                    "avg_execution_time": {
                        "avg": {"field": "execution_time_ms"}
                    },
                    "total_jobs": {
                        "value_count": {"field": "job_id"}
                    },
                    "success_rate": {
                        "filter": {"term": {"status": "completed"}}
                    },
                    "by_engine": {
                        "terms": {"field": "engine_type"}
                    },
                    "execution_times_over_time": {
                        "date_histogram": {
                            "field": "timestamp",
                            "calendar_interval": "1h"
                        },
                        "aggs": {
                            "avg_time": {
                                "avg": {"field": "execution_time_ms"}
                            }
                        }
                    }
                },
                "sort": [
                    {"timestamp": {"order": "desc"}}
                ],
                "size": 100
            }
            
            response = requests.post(
                f"{ELASTICSEARCH_URL}/{INDEX_NAME}/_search",
                json=query,
                headers={'Content-Type': 'application/json'}
            )
            
            if response.status_code != 200:
                return jsonify({"error": "Erro ao buscar métricas"}), 500
            
            data = response.json()
            aggregations = data.get('aggregations', {})
            
            metrics = {
                "total_jobs": aggregations.get('total_jobs', {}).get('value', 0),
                "avg_execution_time": aggregations.get('avg_execution_time', {}).get('value', 0),
                "success_rate": 0,
                "engines": [],
                "engine_counts": [],
                "execution_times": [],
                "time_labels": []
            }
            
            total_jobs = metrics["total_jobs"]
            if total_jobs > 0:
                success_count = aggregations.get('success_rate', {}).get('doc_count', 0)
                metrics["success_rate"] = success_count / total_jobs
            
            by_engine = aggregations.get('by_engine', {}).get('buckets', [])
            for bucket in by_engine:
                metrics["engines"].append(bucket['key'])
                metrics["engine_counts"].append(bucket['doc_count'])
            
            time_buckets = aggregations.get('execution_times_over_time', {}).get('buckets', [])
            for bucket in time_buckets:
                timestamp = bucket['key_as_string']
                avg_time = bucket.get('avg_time', {}).get('value', 0)
                metrics["time_labels"].append(timestamp)
                metrics["execution_times"].append(avg_time)
            
            return jsonify(metrics)
            
        except Exception as e:
            return jsonify({"error": str(e)}), 500

    if __name__ == '__main__':
        app.run(host='0.0.0.0', port=5001, debug=True)
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: dashboard-config
  namespace: dashboard
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="pt-BR">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Game of Life - Dashboard de Métricas</title>
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
        <style>
            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }
            
            body {
                font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
                color: #333;
                line-height: 1.6;
            }
            
            .container {
                max-width: 1400px;
                margin: 0 auto;
                padding: 20px;
            }
            
            .header {
                text-align: center;
                margin-bottom: 40px;
                color: white;
            }
            
            .header h1 {
                font-size: 2.5rem;
                font-weight: 700;
                margin-bottom: 10px;
                text-shadow: 0 2px 4px rgba(0,0,0,0.3);
            }
            
            .header p {
                font-size: 1.1rem;
                opacity: 0.9;
                font-weight: 300;
            }
            
            .metrics-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
                gap: 25px;
                margin-bottom: 30px;
            }
            
            .metric-card {
                background: rgba(255, 255, 255, 0.95);
                backdrop-filter: blur(10px);
                border-radius: 16px;
                padding: 30px;
                box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
                border: 1px solid rgba(255, 255, 255, 0.2);
                transition: transform 0.3s ease, box-shadow 0.3s ease;
            }
            
            .metric-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
            }
            
            .metric-card h2 {
                font-size: 1.5rem;
                font-weight: 600;
                margin-bottom: 20px;
                color: #2d3748;
                display: flex;
                align-items: center;
                gap: 10px;
            }
            
            .metric-card h2::before {
                content: '';
                width: 4px;
                height: 24px;
                background: linear-gradient(135deg, #667eea, #764ba2);
                border-radius: 2px;
            }
            
            .chart-container {
                position: relative;
                height: 350px;
                margin: 20px 0;
            }
            
            .btn {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                border: none;
                padding: 12px 24px;
                border-radius: 8px;
                cursor: pointer;
                font-weight: 500;
                font-size: 0.9rem;
                transition: all 0.3s ease;
                box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
            }
            
            .btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 20px rgba(102, 126, 234, 0.6);
            }
            
            .btn:active {
                transform: translateY(0);
            }
            
            .summary-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 20px;
                margin-top: 20px;
            }
            
            .summary-item {
                background: linear-gradient(135deg, #f7fafc 0%, #edf2f7 100%);
                padding: 20px;
                border-radius: 12px;
                text-align: center;
                border: 1px solid #e2e8f0;
            }
            
            .summary-item h3 {
                font-size: 0.9rem;
                font-weight: 500;
                color: #718096;
                margin-bottom: 8px;
                text-transform: uppercase;
                letter-spacing: 0.5px;
            }
            
            .summary-item .value {
                font-size: 2rem;
                font-weight: 700;
                color: #2d3748;
                margin-bottom: 5px;
            }
            
            .summary-item .unit {
                font-size: 0.8rem;
                color: #a0aec0;
                font-weight: 400;
            }
            
            .status-indicator {
                display: inline-block;
                width: 8px;
                height: 8px;
                border-radius: 50%;
                margin-right: 8px;
            }
            
            .status-online {
                background: #48bb78;
                box-shadow: 0 0 0 2px rgba(72, 187, 120, 0.2);
            }
            
            .status-offline {
                background: #f56565;
                box-shadow: 0 0 0 2px rgba(245, 101, 101, 0.2);
            }
            
            .loading {
                text-align: center;
                padding: 40px;
                color: #718096;
            }
            
            .error {
                background: #fed7d7;
                color: #c53030;
                padding: 15px;
                border-radius: 8px;
                border: 1px solid #feb2b2;
                margin: 10px 0;
            }
            
            @media (max-width: 768px) {
                .container {
                    padding: 15px;
                }
                
                .header h1 {
                    font-size: 2rem;
                }
                
                .metrics-grid {
                    grid-template-columns: 1fr;
                    gap: 20px;
                }
                
                .metric-card {
                    padding: 20px;
                }
                
                .chart-container {
                    height: 300px;
                }
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>Game of Life</h1>
                <p>Dashboard de Métricas de Processamento</p>
            </div>
            
            <div class="metrics-grid">
                <div class="metric-card">
                    <h2>Resumo das Métricas</h2>
                    <button class="btn" onclick="loadMetrics()">
                        <span class="status-indicator status-online"></span>
                        Atualizar Métricas
                    </button>
                    <div id="summary" class="summary-grid"></div>
                </div>
                
                <div class="metric-card">
                    <h2>Execuções por Engine</h2>
                    <div class="chart-container">
                        <canvas id="engineChart"></canvas>
                    </div>
                </div>
                
                <div class="metric-card">
                    <h2>Tempo de Execução</h2>
                    <div class="chart-container">
                        <canvas id="timeChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
        
        <script>
            let engineChart, timeChart;
            
            async function loadMetrics() {
                try {
                    // Mostrar loading
                    document.getElementById('summary').innerHTML = '<div class="loading">Carregando métricas...</div>';
                    
                    // Dados simulados por enquanto
                    const data = {
                        total_jobs: 5,
                        avg_execution_time: 1500,
                        success_rate: 0.8,
                        engines: ['Spark', 'OpenMP', 'MPI'],
                        engine_counts: [3, 1, 1],
                        execution_times: [1200, 1800, 2100, 1400, 1600],
                        time_labels: ['10:00', '11:00', '12:00', '13:00', '14:00']
                    };
                    
                    updateSummary(data);
                    updateCharts(data);
                } catch (error) {
                    console.error('Erro ao carregar métricas:', error);
                    document.getElementById('summary').innerHTML = '<div class="error">Erro ao carregar métricas</div>';
                }
            }
            
            function updateSummary(data) {
                const summary = document.getElementById('summary');
                summary.innerHTML = `
                    <div class="summary-item">
                        <h3>Total de Jobs</h3>
                        <div class="value">${data.total_jobs || 0}</div>
                        <div class="unit">execuções</div>
                    </div>
                    <div class="summary-item">
                        <h3>Tempo Médio</h3>
                        <div class="value">${Math.round(data.avg_execution_time || 0)}</div>
                        <div class="unit">milissegundos</div>
                    </div>
                    <div class="summary-item">
                        <h3>Taxa de Sucesso</h3>
                        <div class="value">${Math.round((data.success_rate || 0) * 100)}%</div>
                        <div class="unit">jobs completados</div>
                    </div>
                `;
            }
            
            function updateCharts(data) {
                // Chart para engines
                const engineCtx = document.getElementById('engineChart').getContext('2d');
                if (engineChart) engineChart.destroy();
                
                engineChart = new Chart(engineCtx, {
                    type: 'doughnut',
                    data: {
                        labels: data.engines || [],
                        datasets: [{
                            data: data.engine_counts || [],
                            backgroundColor: [
                                'rgba(102, 126, 234, 0.8)',
                                'rgba(118, 75, 162, 0.8)',
                                'rgba(255, 99, 132, 0.8)'
                            ],
                            borderColor: [
                                'rgba(102, 126, 234, 1)',
                                'rgba(118, 75, 162, 1)',
                                'rgba(255, 99, 132, 1)'
                            ],
                            borderWidth: 2
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'bottom',
                                labels: {
                                    padding: 20,
                                    usePointStyle: true,
                                    font: {
                                        size: 12,
                                        weight: '500'
                                    }
                                }
                            }
                        }
                    }
                });
                
                // Chart para tempo de execução
                const timeCtx = document.getElementById('timeChart').getContext('2d');
                if (timeChart) timeChart.destroy();
                
                timeChart = new Chart(timeCtx, {
                    type: 'line',
                    data: {
                        labels: data.time_labels || [],
                        datasets: [{
                            label: 'Tempo de Execução',
                            data: data.execution_times || [],
                            borderColor: 'rgba(102, 126, 234, 1)',
                            backgroundColor: 'rgba(102, 126, 234, 0.1)',
                            borderWidth: 3,
                            tension: 0.4,
                            fill: true,
                            pointBackgroundColor: 'rgba(102, 126, 234, 1)',
                            pointBorderColor: '#fff',
                            pointBorderWidth: 2,
                            pointRadius: 6,
                            pointHoverRadius: 8
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                display: false
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                grid: {
                                    color: 'rgba(0, 0, 0, 0.1)'
                                },
                                ticks: {
                                    font: {
                                        size: 12
                                    }
                                }
                            },
                            x: {
                                grid: {
                                    color: 'rgba(0, 0, 0, 0.1)'
                                },
                                ticks: {
                                    font: {
                                        size: 12
                                    }
                                }
                            }
                        }
                    }
                });
            }
            
            // Carregar métricas ao iniciar
            loadMetrics();
            
            // Atualizar a cada 30 segundos
            setInterval(loadMetrics, 30000);
        </script>
    </body>
    </html>
---
apiVersion: v1
kind: Service
metadata:
  name: metrics-dashboard
  namespace: dashboard
spec:
  selector:
    app: metrics-dashboard
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
  type: NodePort 